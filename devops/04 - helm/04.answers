1.  https://www.youtube.com/watch?v=LeVULLqWwcg
    Kubernetes is a platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.

    Kubernetes provides with a framework to run distributed systems resiliently.
    It takes care of scaling and failover for your application, provides deployment patterns, and more.
    For example, Kubernetes can easily manage a canary deployment for your system.

    Kubernetes provides you with:

    Service discovery and load balancing:
    - Kubernetes can expose a container using the DNS name or using their own IP address. If traffic to a container is high, Kubernetes is able to load balance and distribute the network traffic so that the deployment is stable.

    Storage orchestration:
    - Kubernetes allows you to automatically mount a storage system of your choice, such as local storages, public cloud providers, and more.

    Automated rollouts and rollbacks
    - You can describe the desired state for your deployed containers using Kubernetes, and it can change the actual state to the desired state at a controlled rate.
    For example, you can automate Kubernetes to create new containers for your deployment, remove existing containers and adopt all their resources to the new container.

    Automatic bin packing:
    - You provide Kubernetes with a cluster of nodes that it can use to run containerized tasks. You tell Kubernetes how much CPU and memory (RAM) each container needs.
    Kubernetes can fit containers onto your nodes to make the best use of your resources.

    Self-healing:
    - Kubernetes restarts containers that fail, replaces containers, kills containers that don't respond to your user-defined health check, and doesn't advertise them to clients until they are ready to serve.
    Secret and configuration management:
    - Kubernetes lets you store and manage sensitive information, such as passwords, OAuth tokens, and SSH keys.
    You can deploy and update secrets and application configuration without rebuilding your container images, and without exposing secrets in your stack configuration.

2.  Kubernetes entities:
    - namespace - to divide cluster resources
    - pod - group of one or more containers, with shared storage and network resources, and a specification for how to run the containers
    - deployment - provides declarative updates for pods and replicasets
    - service - an abstract way to expose an application running on a set of Pods as a network service
    - daemonset - ensures that all (or some) Nodes run a copy of a Pod
    - replicaset - to maintain a stable set of replica Pods running at any given time
    - statefulset - manages the deployment and scaling of a set of Pods, and provides guarantees about the ordering and uniqueness of these Pods
    - configmap - an API object used to store non-confidential data in key-value pairs, and can be consumed as environment variables, command-line arguments, or as configuration files in a volume
    - secret - let you store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys
    - ingress - provide load balancing, SSL termination and name-based virtual hosting

3.  kubectl - to work with k8s cluster inside AWS EKS
    spinnaker - to deploy k8s manifests into AWS EKS by pushing the manifest into git repo
    helm - to test new software in a quick manner and to do this task

4.  Helm chart is a collection of files that describe a related set of Kubernetes resources

5.  Umbrella chart is a top level chart that exposes the global configurations and has other charts in the charts/ subdirectory to embed each of the components
